You are building a real-time AI interview assistant.

üß† Objective:
Create an application that listens to job interviews in real time (via microphone or system audio), transcribes what the candidate says using Whisper, summarizes it into structured bullet-point notes using GPT, and displays the notes in a live-updating UI. At the end of the interview, the user can export the notes to a `.txt` or `.docx` file.

---

üõ†Ô∏è Technologies to Use:

Language:  
- Python 3.10+

Core Libraries:  
- `whisper` (OpenAI Whisper for speech-to-text transcription)  
- `pyaudio` or `sounddevice` (to capture live microphone input)  
- `openai` (for GPT-4 or GPT-3.5-turbo summarization)  
- `streamlit` (for real-time UI)  
- `python-docx` (for exporting .docx file)  
- `datetime`, `os`, `tempfile`, `textwrap` (standard modules)

File Structure:
project/
‚îú‚îÄ‚îÄ app.py # Streamlit UI logic
‚îú‚îÄ‚îÄ audio.py # Handles audio recording and saving
‚îú‚îÄ‚îÄ transcribe.py # Runs Whisper model on audio chunks
‚îú‚îÄ‚îÄ summarize.py # Sends transcript to GPT and returns structured text
‚îú‚îÄ‚îÄ export.py # Handles export to .txt or .docx
‚îú‚îÄ‚îÄ requirements.txt

markdown
Copy
Edit

---

‚úÖ Core Features to Implement:

1. **Audio Capture (Live Microphone Input)**  
   - Continuously record audio in 5‚Äì10 second chunks  
   - Save each chunk to a `.wav` file  
   - Trigger transcription after each chunk

2. **Speech-to-Text (Transcription using Whisper)**  
   - Load Whisper model (use `'base'` or `'small'` for speed)  
   - Transcribe each chunk  
   - Append transcribed text to a cumulative transcript string  

3. **Summarization with GPT**  
   - After every N seconds or M characters, send the cumulative transcript to GPT-4  
   - Prompt GPT to generate bullet-point notes, formatted like a recruiter‚Äôs interview summary  
   - The format should look like:

Security Expertise:
‚óè Experience with ISO 27001 and CCMC compliance
‚óè Led security audits at Fisker

Leadership & Team Management:
‚óè Manages 4 direct reports
‚óè Previously managed international teams

Salary & Availability:
‚óè Looking for $180K‚Äì190K base
‚óè Open to hybrid in Fountain Valley

markdown
Copy
Edit

4. **Live-Update UI (Streamlit)**  
   - Show the current transcript (optional)  
   - Show the GPT-generated summary in a clean, formatted panel  
   - Add export buttons for `.txt` and `.docx`  
   - Add a timer to show duration of interview  
   - Show status indicator ("Listening", "Summarizing", "Idle", etc.)

5. **Export Functions**  
   - When interview ends, let the user click a button to export:  
     - `.txt` ‚Üí plain text version of the summary  
     - `.docx` ‚Üí formatted document using `python-docx`  

---

üí° Notes for GPT Prompt Design:

- The prompt sent to GPT should clearly instruct:
  - To write recruiter-style summaries
  - Use bullet points under relevant categories
  - Never fabricate information not present in the transcript
  - Return clean plain-text output (not JSON or code blocks)

Sample GPT prompt:
Summarize the following transcript into a professional, recruiter-style note.
Use clear section headers and bullet points. Write in full sentences. Include only information the candidate actually said.

Transcript:
[insert transcript here]

yaml
Copy
Edit

---

üì¶ Suggested Development Order:

1. Set up project folder and install dependencies  
2. Implement audio recording + Whisper transcription  
3. Build GPT summarization module  
4. Build live UI using Streamlit  
5. Connect all pieces: audio ‚Üí text ‚Üí GPT ‚Üí UI  
6. Add export functionality  
7. Final test with real audio  
8. Optional: session saving, language detection, speaker diarization

---

üéØ End goal:
A recruiter can launch this tool before a video interview, and without doing anything, the tool will:
- Listen to the conversation
- Transcribe it in real time
- Summarize the candidate‚Äôs responses
- Show the summary live on screen
- Export it to a file after the interview ends

Build this as a standalone, local-first tool that respects privacy and is easy to run from a laptop.

Let me know if you need examples or scaffolding code for any of the components.

---

Rule:
Program UI should be in English and Korean (User can choose)
You will interact in Korean on conversation.
Always respond in Korean.
Always refer to and writes on tasks.md file, Write Tasks if we got future tasks, if there are updates to the file, write them in the update section, if there are errors, write them in the error section. If the error is solved, add solved and also add how you solved it.
